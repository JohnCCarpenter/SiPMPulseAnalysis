import matplotlib.pyplot as plt
import numpy as np
import csv

###MAIN DATA###

data = []
with open('Timings.txt') as file:
    reader = csv.reader(file, delimiter=' ', quotechar='|')
    for row in file:
        data.append(float(row))
        
bins = np.logspace(-9, -1, 100)
#bins = [5*x/(1*10**4) for x in range(75)] #range(n) gives n*10 nanoseconds
    
counts, times, patches = plt.hist(data, bins)   
plt.show()                

###DEFINITIONS###

# pi = probability per unit time in a given bin
def pi(box):
    rate = counts[box]/(sum(counts)*(times[box+1]-times[box]))
    return(rate)

# Uncertainty of pi
def uPi(box):
    error = np.sqrt(counts[box])/(sum(counts)*(times[box+1]-times[box]))
    return(error)

# chance of pulses occuring in time frame ***box-box+1
def pulseProb(box):
    prob = counts[box]/sum(counts)
    return(prob)
    
# Uncertainty for pulseProb caluculation
def uPulseProb(box):
    error = np.sqrt(counts[box])/sum(counts)
    return(error)

#pulserate = rho i 
def pulserate(box):
    rate = counts[box]/(times[box+1]-times[box])
    return(rate)

# Uncertainty of pulserate
def uPulserate(box):
    rate = np.sqrt(counts[box])/(times[box+1]-times[box])
    return(rate)

###DATA STRUCTURES###
    
#Create a data structure which is list of lambda values using for loop
lambdas = []
betas = []

for i in range(len(counts)):
    betas.append(sum(lambdas))
    lambdas.append(-1 * np.log(1 - (pulseProb(i) / np.exp(-1 * betas[i-1]))))
    
###PLOTS###
    
# Histogram of Secondary Pulse timing
plt.hist(data, bins, color='c')
plt.ylabel('Counts')
plt.xlabel('Time (s)')
plt.title('Timing Distribution of Secondary Pulses in SiPM')
plt.yscale('log')
plt.xscale('log')
plt.show()

# Plot of the lambda vs time
plt.plot(bins[0:-1], lambdas)
plt.ylabel('Lambda')
plt.xlabel('Time (sec)')
plt.title('Lambda vs. Time')
plt.yscale('log')
plt.xscale('log')
plt.show()

# Plot of the beta vs time
plt.plot(bins[0:-1], betas)
plt.ylabel('Beta')
plt.xlabel('Time (sec)')
plt.title('Beta vs. Time')
plt.yscale('log')
plt.xscale('log')
plt.show()

# Plot of the pulseProb vs time
pulse_prob_uncertainties = [uPulseProb(x) for x in range(len(bins[0:-1]))]

plt.plot(bins[0:-1], [pulseProb(x) for x in range(len(bins)-1)])
plt.ylabel('Pulse Probability')
plt.xlabel('Time (sec)')
plt.title('Pulse Probability vs. Time')
plt.yscale('log')
plt.xscale('log')
plt.errorbar(bins[0:-1], [pulseProb(x) for x in range(len(bins)-1)],
             yerr=pulse_prob_uncertainties)
plt.show()

# Plot of the pulserate vs time
pulserate_uncertainties = [uPulserate(x) for x in range(len(bins[0:-1]))]

plt.plot(bins[0:-1], [pulserate(x) for x in range(len(bins)-1)], color='k',)
plt.ylabel('Pulserate (counts/sec)')
plt.xlabel('Time (sec)')
plt.title('Pulserate vs. Time')
plt.yscale('log')
plt.xscale('log')
plt.errorbar(bins[0:-1], [pulserate(x) for x in range(len(bins)-1)], 
             yerr=pulserate_uncertainties)
plt.show()
    
# Plot of the pi vs time 
pi_uncertainties = [uPi(x) for x in range(len(bins[0:-1]))]

plt.plot(bins[0:-1], [pi(x) for x in range(len(bins)-1)], color='k',)
plt.ylabel('pi (1/sec)')
plt.xlabel('Time (sec)')
plt.title('pi vs. Time')
plt.yscale('log')
plt.xscale('log')
plt.errorbar(bins[0:-1], [pi(x) for x in range(len(bins)-1)], 
             yerr=pi_uncertainties)
plt.show()
