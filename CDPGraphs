import matplotlib.pyplot as plt
import numpy as np
import csv

###FUNCTIONS###================================================================
# Uncertainty of pulserate Error propagation good?
def uPulserate(box):
    rate = uLambda(box)/(times[box+1]-times[box])
    return(rate)

# Uncertainty of lambda
def uLambda(box):   
    if box == 0:
        error = 0
    else: 
        error = (np.sqrt(np.square(uPulseProb(box)) + \
                np.square(pulseProbs[box]) * np.square(uBeta(box)))) \
                /(np.exp(-betas[box-1]) - pulseProbs[box-1])
    return(error)
    
# Uncertainty for pulseProb caluculation
def uPulseProb(box):
    error = np.sqrt(counts[box])/len(data)
    return(error)
    
# Uncertainty of beta
def uBeta(box):
    if box == 0: 
        error = 0
    else:
        error = np.sqrt(np.square(uPulseProb(box-1)) + \
                np.square(np.exp(-betas[box-1])*uBeta(box-1)))\
                /(np.exp(-betas[box-1]) - pulseProbs[box-1])
    return(error) 
######=========================================================================


###DATA###=====================================================================
data = []
with open('Timings.txt', 'r') as file:
    reader = csv.reader(file, delimiter=' ', quotechar='|')
    for row in file:
        data.append(float(row))

# Filter out any values over 1us
sort = [x for x in data if x<0.000001]
  
# Binning options to show small range and full range of data
bins = np.logspace(-9, -5, 100)      
wide_bins = np.logspace(-9, -1, 100)

# Assign variables to counts in each bin, edges of bins, and patches(unused)
counts, times, patches = plt.hist(sort, bins)

# Intitialize beta and recording lists used in loop
beta = 0  #Initialize here because it is used before it's definition in loop
betas = []
lambdas = []
pulseProbs = []
pulseRates = []

for i in range(len(counts)): # calculates a variable then captures it in list
    pulseProb = counts[i]/len(data)   
    pulseProbs.append(pulseProb)  
    lamb = -np.log(1 - (pulseProb / np.exp(-beta)))    
    lambdas.append(lamb)
    beta += lamb
    betas.append(beta)
    pulseRate = lamb/(times[i+1]-times[i])
    pulseRates.append(pulseRate)
    
# Create lists of the uncertainties using fns
beta_uncertainties = [uBeta(x) for x in range(len(bins) - 1)]   
pulserate_uncertainties = [uPulserate(x) for x in range(len(bins[0:-1]))]
lambda_uncertainties = [uLambda(x) for x in range(len(counts))]
pulse_prob_uncertainties = [uPulseProb(x) for x in range(len(bins[0:-1]))]

# Find different notations of CDP by integrating over first 1us 
cdps = sum(lambdas)   
ucdps = np.sqrt(sum([np.square(x) for x in lambda_uncertainties]))
cdprate = sum(pulseRates)
ucdprate = np.sqrt(sum([np.square(x) for x in pulserate_uncertainties]))
######=========================================================================


###RESULTS/PLOTS###============================================================
# Present different types cdp and their uncertainties, scaled for readability
print("Chance CDP: ", cdps*100, "+-", ucdps*100, "%")
print("CDP Rate: ", cdprate/1000000, "+-", ucdprate/1000000, "counts/us")

#Create original hist of full data range    
plt.hist(data, wide_bins)   
plt.ylabel('Counts')    
plt.xlabel('Time (s)')
plt.title('Full Timing Distribution of Secondary Pulses in SiPM')
plt.yscale('log')
plt.xscale('log')
plt.show() 

#Create hist of filtered data
plt.hist(sort, bins)   
plt.ylabel('Counts')    
plt.xlabel('Time (s)')
plt.title('First us Timing Distribution of Secondary Pulses in SiPM')
plt.yscale('log')
plt.xscale('log')
plt.show() 

# Plot of the beta vs time
plt.plot(bins[:-1], betas)
plt.ylabel('Beta')
plt.xlabel('Time (sec)')
plt.title('Beta vs. Time')
plt.yscale('log')
plt.xscale('log')
plt.errorbar(bins[0:-1], betas, yerr=beta_uncertainties)
plt.show()

# Plot of the lambda vs time
plt.plot(bins[:-1], lambdas)
plt.ylabel('Lambda')
plt.xlabel('Time (sec)')
plt.title('Lambda vs. Time')
plt.yscale('log')
plt.xscale('log')
plt.errorbar(bins[0:-1], lambdas, yerr=lambda_uncertainties)
plt.show()

# Plot of the pulseProb vs time
plt.plot(bins[:-1], pulseProbs)
plt.ylabel('Pulse Probability')
plt.xlabel('Time (sec)')
plt.title('Pulse Probability vs. Time')
plt.yscale('log')
plt.xscale('log')
plt.errorbar(bins[0:-1], pulseProbs, yerr=pulse_prob_uncertainties)
plt.show()

# Plot of the pulserate vs time
plt.plot(bins[0:-1], pulseRates, color='k',)
plt.ylabel('Pulserate (counts/sec)')
plt.xlabel('Time (sec)')
plt.title('Pulserate vs. Time')
plt.yscale('log')
plt.xscale('log')
plt.errorbar(bins[0:-1], pulseRates, yerr=pulserate_uncertainties)
plt.show()
